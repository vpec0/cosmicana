#include "../constants.h"

void doXlog(TH1* h)
// redo scales for x-log hists
{
    TAxis* axis = h->GetXaxis();

    double start = TMath::Log10(axis->GetXmin());
    double stop = TMath::Log10(axis->GetXmax());
    double range = stop - start;
    int nbins = axis->GetNbins();
    double binwidth = range / nbins;

    double *bins = new double[nbins+1];
    for (int i = 0; i < (nbins+1); ++i) {
        bins[i] = TMath::Power(10, start + i*binwidth);
    }

    axis->Set(nbins, bins);

    delete[] bins;
}


size_t attachFiles(TChain* tree, const char* fname,
		   size_t batchNo, size_t Nruns, size_t startRun,
		   const char* data_version = "v08_34_00",
		   const char* source = "")
{
    size_t size = 0;

    if (!strcmp(fname, "")) { // no input given
	cout<<"Will add production files from batch "
	    <<batchNo<<" to the chain (unchecked)."<<endl;

	TString batch = Form("%lu", batchNo);
	TString topdir = "/data/dune/calibration/cosmic_muons/dunetpc_";
	topdir.Append(data_version).Append("/");
	if (!strcmp("kumar", source)) {
	    topdir = "/data/kumar/dune/cosmic/largeproduction/";
	    topdir.Append(data_version).Append("/data/");
	} else 	if (!strcmp("imran", source)) {
	    topdir = "/data/iyusuff/cosmicgen_20190419/data/";
	} else 	if (strcmp("", source)) {
	    // non-empty source, take it as the top directory for the batch subdirectories
	    topdir = source;
	    topdir.Append("/");
	}
	topdir.Append(batch + "/");

	cout<<"Batch directory "<<topdir<<endl;
	for (size_t j = 0; j<Nruns; j++) {
	    TString runNo = Form("%lu", batchNo + j + startRun);
	    TString fname = topdir + runNo + "/MUSUN_dunefd_" + runNo + "_*_ana.root";
	    //cout<<"Adding run "<<runNo<<", file "<<fname<<endl;
	    int status = tree->Add(fname, TTree::kMaxEntries);
	}
	tree->GetEntry(0);
	size = tree->GetTree()->GetEntries();
	size *= tree->GetNtrees();
	cout<<"Added "<<tree->GetNtrees()<<" trees"<<endl;
	cout<<"Estimated number of entries: "<<size<<endl;
    } else { // input given
	cout<<"Adding "<<fname<<" to the chain."<<endl;
	int status = tree->Add(fname, -1);
	if (!status) { // try to look in the base dir
	    tree->SetName("anatree");
	    status = tree->Add(fname, -1);
	}
	cout<<"Status: "<<status<<endl;
	size = tree->GetEntries();
    }

    return size;
}


void crossingAPACPA(const TVector3& start, const TVector3& end, Int_t& napa, Int_t* apa, Int_t& ncpa, Int_t* cpa)
{
    double ay, by, az, bz, x1, x2, y1, y2, z1, z2;

    x1 = start.X();
    x2 = end.X();
    y1 = start.Y();
    y2 = end.Y();
    z1 = start.Z();
    z2 = end.Z();

    ay = (y1-y2)/(x1-x2);
    az = (z1-z2)/(x1-x2);

    by = y1 - ay*x1;
    bz = z1 - az*x1;

    int iapa = -1;
    napa = 0;
    ncpa = 0;
    for (auto xapa: APA_X_POSITIONS) {
	++iapa;
	if ( (xapa < x1 && xapa < x2) || (xapa > x2 && xapa > x1) )
	    continue; // not crossing this APA section

	// get y and z coordinate of the crossing
	double yapa = ay * xapa + by;
	double zapa = az * xapa + bz;

	// cout<<"Testing APA "<<iapa<<" at "<<xapa<<" cm, "
	//     <<"x1 = "<<x1<<", x2 = "<<x2<<endl;
	// cout<<"APA crossed at ";
	// cout<<Form("(%.1f,%.1f,%.1f)", xapa, yapa, zapa)<<endl;

	// get the APA number
	int apanum = int(zapa / TPC_Z_SIZE) * 6 + (yapa>0.)*3 + iapa;

	apa[napa] = apanum;
	++napa;
    }

    int icpa = 0;
    for (auto xcpa: CPA_X_POSITIONS) {
	++icpa;

	if ( (xcpa < x1 && xcpa < x2) || (xcpa > x2 && xcpa > x1) )
	    continue; // not crossing this CPA section
	// get y and z coordinate of the crossing
	double ycpa = ay * xcpa + by;
	double zcpa = az * xcpa + bz;

	// cout<<"Testing CPA "<<icpa<<" at "<<xcpa<<" cm"<<endl;
	// cout<<"CPA crossed at ";
	// cout<<Form("(%.1f,%.1f,%.1f)", xcpa, ycpa, zcpa)<<endl;

	// get the CPA number
	int cpanum = int(zcpa / TPC_Z_SIZE) * 4 + (ycpa>0.)*2 + icpa;

	cpa[ncpa] = cpanum;
	++ncpa;
    }
}
